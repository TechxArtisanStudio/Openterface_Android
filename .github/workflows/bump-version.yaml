name: Bump Version

on:
  workflow_dispatch:
    inputs:
      bump_type:
        description: 'Version bump type'
        required: true
        type: choice
        options:
          - patch
          - minor
          - major
        default: 'patch'
      create_tag:
        description: 'Create git tag for new version'
        required: false
        type: boolean
        default: false
      trigger_build:
        description: 'Trigger build after version bump'
        required: false
        type: boolean
        default: true

jobs:
  bump-version:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      new_version: ${{ steps.bump.outputs.new_version }}
      new_code: ${{ steps.bump.outputs.new_code }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Bump Version
      id: bump
      run: |
        # Read current version
        CURRENT_VERSION=$(grep "versionName" app/build.gradle | awk '{print $2}' | tr -d '"')
        CURRENT_CODE=$(grep "versionCode" app/build.gradle | awk '{print $2}')
        
        echo "📦 Current version: $CURRENT_VERSION (code: $CURRENT_CODE)"
        
        # Parse version (e.g., 1.2.0 -> major=1, minor=2, patch=0)
        IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
        
        # Bump version based on input
        BUMP_TYPE="${{ github.event.inputs.bump_type }}"
        echo "🔼 Bump type: $BUMP_TYPE"
        
        case "$BUMP_TYPE" in
          major)
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
            echo "Major version bump"
            ;;
          minor)
            MINOR=$((MINOR + 1))
            PATCH=0
            echo "Minor version bump"
            ;;
          patch)
            PATCH=$((PATCH + 1))
            echo "Patch version bump"
            ;;
        esac
        
        NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}"
        NEW_CODE=$((CURRENT_CODE + 1))
        
        echo "✨ New version: $NEW_VERSION (code: $NEW_CODE)"
        
        # Update build.gradle
        sed -i "s/versionCode $CURRENT_CODE/versionCode $NEW_CODE/" app/build.gradle
        sed -i "s/versionName \"$CURRENT_VERSION\"/versionName \"$NEW_VERSION\"/" app/build.gradle
        
        # Verify changes
        echo "Updated build.gradle:"
        grep -A 2 "versionCode" app/build.gradle | head -3
        
        # Set outputs
        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "new_code=$NEW_CODE" >> $GITHUB_OUTPUT
        echo "old_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        echo "old_code=$CURRENT_CODE" >> $GITHUB_OUTPUT
        echo "bump_type=$BUMP_TYPE" >> $GITHUB_OUTPUT
        
    - name: Commit Version Bump
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git add app/build.gradle
        git commit -m "chore: bump version to ${{ steps.bump.outputs.new_version }} (code: ${{ steps.bump.outputs.new_code }})"
        git push
        
    - name: Create Git Tag
      if: github.event.inputs.create_tag == 'true'
      run: |
        TAG_NAME="v${{ steps.bump.outputs.new_version }}"
        git tag -a "$TAG_NAME" -m "Release $TAG_NAME"
        git push origin "$TAG_NAME"
        echo "✅ Created tag: $TAG_NAME"
        
    - name: Build Summary
      run: |
        echo "## 🎉 Version Bumped Successfully!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📋 Version Information" >> $GITHUB_STEP_SUMMARY
        echo "- **Bump Type**: ${{ steps.bump.outputs.bump_type }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Old Version**: ${{ steps.bump.outputs.old_version }} (code: ${{ steps.bump.outputs.old_code }})" >> $GITHUB_STEP_SUMMARY
        echo "- **New Version**: ${{ steps.bump.outputs.new_version }} (code: ${{ steps.bump.outputs.new_code }})" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        if [ "${{ github.event.inputs.create_tag }}" = "true" ]; then
          echo "### 🏷️ Git Tag" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Created tag: v${{ steps.bump.outputs.new_version }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
        fi
        if [ "${{ github.event.inputs.trigger_build }}" = "true" ]; then
          echo "### 🔨 Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "- ⏳ Build workflow will be triggered automatically" >> $GITHUB_STEP_SUMMARY
        fi

  trigger-build:
    needs: bump-version
    if: github.event.inputs.trigger_build == 'true'
    runs-on: ubuntu-latest
    permissions:
      actions: write
      contents: read
    
    steps:
    - name: Trigger Build Workflow
      uses: actions/github-script@v7
      with:
        script: |
          await github.rest.actions.createWorkflowDispatch({
            owner: context.repo.owner,
            repo: context.repo.repo,
            workflow_id: 'build-package.yaml',
            ref: 'main'
          });
          console.log('✅ Build workflow triggered for version ${{ needs.bump-version.outputs.new_version }}');
