name: Openterface Build & Package

on:
  push:
    branches:
      - 'main'
  pull_request:
    branches:
      - 'main'
  workflow_dispatch:
    inputs:
      version_bump:
        description: 'Version bump type (none = no version change)'
        required: false
        type: choice
        options:
          - none
          - patch
          - minor
          - major
        default: 'none'

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Bump Version
      if: github.event.inputs.version_bump != 'none' && github.event.inputs.version_bump != ''
      id: bump_version
      run: |
        # Read current version
        CURRENT_VERSION=$(grep "versionName" app/build.gradle | awk '{print $2}' | tr -d '"')
        CURRENT_CODE=$(grep "versionCode" app/build.gradle | awk '{print $2}')
        
        echo "Current version: $CURRENT_VERSION (code: $CURRENT_CODE)"
        
        # Parse version (e.g., 1.2.0 -> major=1, minor=2, patch=0)
        IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
        
        # Bump version based on input
        BUMP_TYPE="${{ github.event.inputs.version_bump }}"
        case "$BUMP_TYPE" in
          major)
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
            ;;
          minor)
            MINOR=$((MINOR + 1))
            PATCH=0
            ;;
          patch)
            PATCH=$((PATCH + 1))
            ;;
        esac
        
        NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}"
        NEW_CODE=$((CURRENT_CODE + 1))
        
        echo "New version: $NEW_VERSION (code: $NEW_CODE)"
        
        # Update build.gradle
        sed -i "s/versionCode $CURRENT_CODE/versionCode $NEW_CODE/" app/build.gradle
        sed -i "s/versionName \"$CURRENT_VERSION\"/versionName \"$NEW_VERSION\"/" app/build.gradle
        
        # Verify changes
        echo "Updated build.gradle:"
        grep -A 2 "versionCode" app/build.gradle | head -3
        
        # Set outputs
        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "new_code=$NEW_CODE" >> $GITHUB_OUTPUT
        echo "bumped=true" >> $GITHUB_OUTPUT
        
    - name: Commit Version Bump
      if: steps.bump_version.outputs.bumped == 'true'
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git add app/build.gradle
        git commit -m "Bump version to ${{ steps.bump_version.outputs.new_version }} (code: ${{ steps.bump_version.outputs.new_code }})"
        git push

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v4
      with:
        cache-read-only: false

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Create local.properties
      run: |
        echo "sdk.dir=$ANDROID_HOME" > local.properties

    - name: Decode Keystore
      env:
        ENCODED_STRING: ${{ secrets.SIGNING_KEY }}
      run: |
        echo "$ENCODED_STRING" | base64 -d > app/keystore.jks
        echo "Keystore file created: app/keystore.jks"
        ls -lh app/keystore.jks
        echo "Verifying keystore format..."
        file app/keystore.jks

    - name: Verify Keystore
      env:
        SIGNING_STORE_PASSWORD: ${{ secrets.KEY_STORE_PASSWORD }}
        SIGNING_KEY_ALIAS: ${{ secrets.ALIAS }}
      run: |
        echo "Verifying keystore can be read..."
        echo "Listing all aliases in keystore:"
        keytool -list -keystore app/keystore.jks -storepass "$SIGNING_STORE_PASSWORD" || {
          echo "❌ Error: Cannot read keystore with store password"
          echo "This means KEY_STORE_PASSWORD is incorrect"
          exit 1
        }
        echo ""
        echo "Verifying specific alias: $SIGNING_KEY_ALIAS"
        keytool -list -keystore app/keystore.jks -storepass "$SIGNING_STORE_PASSWORD" -alias "$SIGNING_KEY_ALIAS" || {
          echo "❌ Error: Alias '$SIGNING_KEY_ALIAS' does not exist in keystore"
          echo "Please check the ALIAS secret in GitHub"
          echo "Available aliases are listed above"
          exit 1
        }
        echo "✅ Keystore verified successfully!"

    - name: Clean Gradle
      run: ./gradlew clean

    - name: Build Release APK
      run: ./gradlew assembleRelease -x lint --info
      env:
        SIGNING_STORE_PASSWORD: ${{ secrets.KEY_STORE_PASSWORD }}
        SIGNING_KEY_ALIAS: ${{ secrets.ALIAS }}
        SIGNING_KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}

    - name: Build Release AAB
      run: ./gradlew bundleRelease -x lint --info
      continue-on-error: true
      env:
        SIGNING_STORE_PASSWORD: ${{ secrets.KEY_STORE_PASSWORD }}
        SIGNING_KEY_ALIAS: ${{ secrets.ALIAS }}
        SIGNING_KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}

    # Verify signing
    - name: Verify APK Signature
      run: |
        echo "Verifying APK signature..."
        jarsigner -verify -verbose -certs app/build/outputs/apk/release/*.apk | grep "SHA"
      continue-on-error: true

    - name: Verify AAB Signature
      run: |
        echo "Verifying AAB signature..."
        jarsigner -verify -verbose -certs app/build/outputs/bundle/release/*.aab | grep "SHA"
      continue-on-error: true

    # Get version info
    - name: Get Version Info
      id: version
      run: |
        VERSION_NAME=$(grep "versionName" app/build.gradle | awk '{print $2}' | tr -d '"')
        VERSION_CODE=$(grep "versionCode" app/build.gradle | awk '{print $2}')
        echo "version_name=$VERSION_NAME" >> $GITHUB_OUTPUT
        echo "version_code=$VERSION_CODE" >> $GITHUB_OUTPUT
        echo "Version: $VERSION_NAME ($VERSION_CODE)"

    # Rename files with version
    - name: Rename Release Files
      run: |
        # Rename APK
        if [ -d "app/build/outputs/apk/release" ]; then
          cd app/build/outputs/apk/release
          for file in *.apk; do
            if [ -f "$file" ]; then
              mv "$file" "Openterface-v${{ steps.version.outputs.version_name }}-release.apk"
              echo "✅ Renamed APK: Openterface-v${{ steps.version.outputs.version_name }}-release.apk"
            fi
          done
          cd ../../../../..
        fi
        
        # Rename AAB (if it exists)
        if [ -d "app/build/outputs/bundle/release" ]; then
          cd app/build/outputs/bundle/release
          for file in *.aab; do
            if [ -f "$file" ]; then
              mv "$file" "Openterface-v${{ steps.version.outputs.version_name }}-release.aab"
              echo "✅ Renamed AAB: Openterface-v${{ steps.version.outputs.version_name }}-release.aab"
            fi
          done
          cd ../../../../..
        else
          echo "⚠️  AAB not found (bundleRelease task may have failed or been skipped)"
        fi

    # Store signed release APK files as artifacts
    - name: Upload Signed Release APK
      uses: actions/upload-artifact@v4
      with:
        name: Openterface-v${{ steps.version.outputs.version_name }}-APK
        path: |
          app/build/outputs/apk/release/*.apk
        retention-days: 90

    # Store signed release AAB files as artifacts
    - name: Upload Signed Release AAB
      uses: actions/upload-artifact@v4
      if: hashFiles('app/build/outputs/bundle/release/*.aab') != ''
      with:
        name: Openterface-v${{ steps.version.outputs.version_name }}-AAB
        path: |
          app/build/outputs/bundle/release/*.aab
        retention-days: 90

    # Create build summary
    - name: Build Summary
      run: |
        echo "## 🎉 Build Successful!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📦 Build Information" >> $GITHUB_STEP_SUMMARY
        echo "- **Version Name**: ${{ steps.version.outputs.version_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Version Code**: ${{ steps.version.outputs.version_code }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Build Time**: $(date)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📱 Artifacts" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ APK: Openterface-v${{ steps.version.outputs.version_name }}-release.apk" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ AAB: Openterface-v${{ steps.version.outputs.version_name }}-release.aab" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🔐 Signing" >> $GITHUB_STEP_SUMMARY
        echo "Both APK and AAB are signed with the release keystore" >> $GITHUB_STEP_SUMMARY